structure A = Absyn
structure S = Symbol

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm program of A.exp
       | decs of A.dec list
       | dec of A.dec
       | ty of A.ty
       | tydecs of {name: A.symbol, ty: A.ty, pos: A.pos} list
       | tydec of {name: A.symbol, ty: A.ty, pos: A.pos}
       | tyfields of A.field list
       | fieldsdec of A.field list
       | vardec of A.dec
       | fundecs of A.fundec list
       | fundec of A.fundec
       | lvalue of A.var
       | lvalue' of A.var
       | exp of A.exp
       | exps of (A.exp * A.pos) list
       | expsemi of (A.exp * A.pos) list
       | expcom of A.exp list
       | params of A.exp list
       | recs of (A.symbol * A.exp * A.pos) list
       | reccom of (A.symbol * A.exp * A.pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
         DO OF NIL

%prefer THEN ELSE LPAREN

%right OF
%nonassoc DO
%nonassoc ELSE
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ GT GE LT LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp                            (exp)

decs :                                   ([])
     | dec decs                          (dec :: decs)

dec : tydecs                             (A.TypeDec tydecs)
    | vardec                             (vardec)
    | fundecs                            (A.FunctionDec fundecs)

tydecs : tydec                           ([tydec])
       | tydec tydecs                    (tydec :: tydecs)

tydec : TYPE ID EQ ty                    ({name=S.symbol ID, ty=ty, pos=TYPEleft})

ty : ID                                  (A.NameTy (S.symbol ID, IDleft))
   | LBRACE tyfields RBRACE              (A.RecordTy tyfields)
   | ARRAY OF ID                         (A.ArrayTy (S.symbol ID, ARRAYleft))

tyfields :                               ([])
         | ID COLON ID fieldsdec         ({name=S.symbol ID1, escape=ref true,
                                           typ=S.symbol ID2, pos=ID1left} :: fieldsdec)

fieldsdec :                              ([])
          | COMMA ID COLON ID fieldsdec  ({name=S.symbol ID1, escape=ref true,
                                           typ=S.symbol ID2, pos=ID1left} :: fieldsdec)

vardec : VAR ID ASSIGN exp               (A.VarDec {name=S.symbol ID, escape=ref true,
                                                    typ=NONE, init=exp, pos=VARleft})
       | VAR ID COLON ID ASSIGN exp      (A.VarDec {name=S.symbol ID1, escape=ref true,
                                                    typ=SOME (S.symbol ID2, ID2left),
                                                    init=exp, pos=VARleft})
fundecs : fundec         ([fundec])
        | fundec fundecs (fundec :: fundecs)

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp
                                       ({name=S.symbol ID, params=tyfields,
                                         result=NONE, body=exp, pos=FUNCTIONleft})
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
                                       ({name=S.symbol ID1, params=tyfields,
                                         result=SOME (S.symbol ID2, ID2left),
                                         body=exp, pos=FUNCTIONleft})

lvalue : ID                            (A.SimpleVar (S.symbol ID, IDleft))
       | lvalue'                       (lvalue')

lvalue' : ID DOT ID                    (A.FieldVar (A.SimpleVar (S.symbol ID1, ID1left),
                                                    S.symbol ID2, ID2left))
        | lvalue' DOT ID               (A.FieldVar (lvalue', S.symbol ID, lvalue'left))
        | ID LBRACK exp RBRACK         (A.SubscriptVar
                                          (A.SimpleVar (S.symbol ID, IDleft),
                                           exp, IDleft))
        | lvalue' LBRACK exp RBRACK    (A.SubscriptVar (lvalue', exp, lvalue'left))

exp : lvalue                           (A.VarExp lvalue)
    | NIL                              (A.NilExp)
    | LPAREN exps RPAREN               (A.SeqExp exps)
    | INT                              (A.IntExp INT)
    | STRING                           (A.StringExp (STRING, STRINGleft))
    | MINUS exp %prec UMINUS           (A.OpExp {left=A.IntExp 0, oper=A.MinusOp,
                                                 right=exp, pos=MINUSleft})
    | ID LPAREN params RPAREN          (A.CallExp {func=S.symbol ID, args=params,
                                                   pos=IDleft})
    | exp PLUS exp                     (A.OpExp {left=exp1, oper=A.PlusOp,
                                                 right=exp2, pos=PLUSleft})
    | exp MINUS exp                    (A.OpExp {left=exp1, oper=A.MinusOp,
                                                 right=exp2, pos=MINUSleft})
    | exp TIMES exp                    (A.OpExp {left=exp1, oper=A.TimesOp,
                                                 right=exp2, pos=TIMESleft})
    | exp DIVIDE exp                   (A.OpExp {left=exp1, oper=A.DivideOp,
                                                 right=exp2, pos=DIVIDEleft})
    | exp EQ exp                       (A.OpExp {left=exp1, oper=A.EqOp,
                                                 right=exp2, pos=EQleft})
    | exp NEQ exp                      (A.OpExp {left=exp1, oper=A.NeqOp,
                                                 right=exp2, pos=NEQleft})
    | exp LT exp                       (A.OpExp {left=exp1, oper=A.LtOp,
                                                 right=exp2, pos=LTleft})
    | exp LE exp                       (A.OpExp {left=exp1, oper=A.LeOp,
                                                 right=exp2, pos=LEleft})
    | exp GT exp                       (A.OpExp {left=exp1, oper=A.GtOp,
                                                 right=exp2, pos=GTleft})
    | exp GE exp                       (A.OpExp {left=exp1, oper=A.GeOp,
                                                 right=exp2, pos=GEleft})
    | exp AND exp                      (A.IfExp {test=exp1, then'=exp2,
                                                 else'=SOME (A.IntExp 0), pos=exp1left})
    | exp OR exp                       (A.IfExp {test=exp1, then'=A.IntExp 1,
                                                 else'=SOME exp2, pos=exp1left})
    | ID LBRACE recs RBRACE            (A.RecordExp {fields=recs, typ=S.symbol ID,
                                                     pos=IDleft})
    | ID LBRACK exp RBRACK OF exp      (A.ArrayExp {typ=S.symbol ID, size=exp1,
                                                    init=exp2, pos=IDleft})
    | lvalue ASSIGN exp                (A.AssignExp {var=lvalue, exp=exp,
                                                     pos=lvalueleft})
    | IF exp THEN exp ELSE exp         (A.IfExp {test=exp1, then'=exp2,
                                                 else'=SOME exp3, pos=IFleft})
    | IF exp THEN exp                  (A.IfExp {test=exp1, then'=exp2,
                                                 else'=NONE, pos=IFleft})
    | WHILE exp DO exp                 (A.WhileExp {test=exp1, body=exp2,
                                                    pos=WHILEleft})
    | FOR ID ASSIGN exp TO exp DO exp  (A.ForExp {var=S.symbol ID, escape=ref true,
                                                  lo=exp1, hi=exp2, body=exp3,
                                                  pos=FORleft})
    | BREAK                            (A.BreakExp BREAKleft)
    | LET decs IN exps END             (A.LetExp {decs=decs, body=A.SeqExp exps,
                                                  pos=LETleft})

exps :                                 ([])
     | exp expsemi                     ((exp, expleft) :: expsemi)

expsemi :                              ([])
        | SEMICOLON exp expsemi        ((exp, expleft) :: expsemi)

params :                               ([])
       | exp expcom                    (exp :: expcom)

expcom :                               ([])
       | COMMA exp expcom              (exp :: expcom)

recs :                                 ([])
     | ID EQ exp reccom                ((S.symbol ID, exp, IDleft) :: reccom)

reccom :                               ([])
       | COMMA ID EQ exp reccom        ((S.symbol ID, exp, IDleft) :: reccom)
